{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1739762364468},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"6497b70356271fd6f9f1dc862353be844c457a53","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"a93d7b3990e45bc7247eecf01888f71674887a63","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"06889bee30e4c39479467021da434d3a6a0990fc","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"57281fc3812c877ec2d8e89ec87ede57b9789d4c","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"1b89d0caba03a66a43d9c290a5e94fa438a89210","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"e9d4678e14be5e3cd5e34d783e5af6d6626092f5","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"0039146b8ccbdf9b9f8bee58fc6c238f0e9921fc","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"0e94f5722d4c44d3cc91be2f4fd30b9ab503b868","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"f608400a08cf137ab15ec1f44bac551950afe879","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1739762555266},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1739762555266},{"_id":"public/2025/02/17/hello-world/index.html","hash":"246759894fc30fb410591e63f8957a2dffc2f9a0","modified":1739786879771},{"_id":"public/archives/index.html","hash":"b256573531d3db01dc9075f2a314798f47712045","modified":1739786879771},{"_id":"public/archives/2025/index.html","hash":"c48315a54c9ce2dbdcafcc91f242199546261097","modified":1739786879771},{"_id":"public/archives/2025/02/index.html","hash":"c95a936d9e62746b30f73a097075f96f02dc9963","modified":1739786879771},{"_id":"public/index.html","hash":"2451261af910f193c82c1ba111055d977188abfd","modified":1739786879771},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1739762735143},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1739762735143},{"_id":"public/css/style.css","hash":"ecc329be740a220cc188ff49b02da4847cb7ee5e","modified":1739762735143},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1739762735143},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1739762735143},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1739762735143},{"_id":"source/_posts/Vue3组件封装的正确姿势.md","hash":"bd67a5d1c3a4b80fcf4c88afcf15a2ba2f41ea32","modified":1739763533047},{"_id":"public/2025/02/17/Vue3组件封装的正确姿势/index.html","hash":"ec596b880ff790413ac7a20fdcd672de25926f4d","modified":1739786879771}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-02-17T03:24:03.535Z","updated":"2025-02-17T03:19:24.468Z","comments":1,"layout":"post","photos":[],"_id":"cm78hta0500002ckldckb3c8v","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Vue3 组件封装：让 UI 组件库“乖乖听话”的正确姿势","_content":"\n在日常开发中，UI 组件库（比如 Ant Design Vue、Element Plus）就像外卖快餐，方便快捷，但总有点“不合胃口”。于是，为了让这些组件更符合我们的需求，我们常常需要对它们进行二次封装。本文将带你体验如何用 Vue3 的 `$attrs` 和 `$slots`，优雅地“调教”这些组件，让它们更灵活、更贴合项目需求。\n\n当然，封装组件这件事儿，说起来简单，做起来就像修水管——一开始觉得能搞定，结果越修越漏。别急，我们会逐步分析封装过程中可能遇到的问题，并给出解决方案。\n\n---\n\n## 1. 需求背景：为什么要封装？\n\n假设我们在项目中频繁使用 Ant Design Vue 的 `a-modal` 组件，但总有一些“个性化需求”需要实现，比如：\n\n- 修改弹窗样式\n- 自定义按钮文字\n- 每次关闭后销毁内容\n- 将弹窗渲染到指定元素上\n\n于是，我们封装了一个自定义弹窗组件，代码如下：\n\n```vue\n<template>\n  <div ref=\"myModal\" class=\"custom-modal\"></div>\n  <a-modal\n    v-model:visible=\"visible\"\n    centered\n    destroyOnClose\n    :getContainer=\"() => $refs.myModal\"\n    @ok=\"handleOk\"\n    @cancel=\"handleCancel\"\n    :style=\"{ width: '560px', ...style }\"\n    :cancelText=\"cancelText\"\n    :okText=\"okText\"\n  >\n    <slot></slot>\n  </a-modal>\n</template>\n\n<script setup>\nconst props = defineProps({\n  title: { type: String, default: \"\" },\n  style: { type: Object, default: () => ({}) },\n  cancelText: { type: String, default: \"取消\" },\n  okText: { type: String, default: \"确定\" },\n});\nconst emits = defineEmits([\"handleOk\", \"handleCancel\"]);\nconst visible = ref(false);\n\nconst handleOk = () => emits(\"handleOk\");\nconst handleCancel = () => emits(\"handleCancel\");\n\ndefineExpose({ visible });\n</script>\n\n<style lang=\"less\" scoped>\n.custom-modal {\n  :deep(.ant-modal) {\n    // 样式代码省略\n  }\n}\n</style>\n```\n\n看起来还不错，对吧？我们可以这样使用它：\n\n```vue\n<CustomModal ref=\"xxxModal\" title=\"提示\" @ok=\"onOk\" @cancel=\"onCancel\">\n  内容区域\n</CustomModal>\n```\n\n但别高兴太早，问题很快就来了。\n\n---\n\n## 2. 问题来了：组件封装中的“烦恼”\n\n### 问题 1：属性扩展的“无底洞”\n\n同事 A 说：“我想去掉右上角的关闭按钮，能不能加个 `closable` 属性？”\n\n同事 B 说：“我想让弹窗不居中显示，能不能加个 `centered` 属性？”\n\n同事 C 说：“我的需求比较特别，我想让弹窗的 z-index 是 9999。”\n\n于是，代码开始膨胀：\n\n```vue\n<a-modal :closable=\"closable\" :centered=\"centered\" :zIndex=\"zIndex\"></a-modal>\n\n<script setup>\nconst props = defineProps({\n  closable: { type: Boolean, default: true },\n  centered: { type: Boolean, default: true },\n  zIndex: { type: Number, default: 1000 },\n});\n</script>\n```\n\n每次有新需求，就得改组件代码，最终变成一个“巨无霸”组件。有没有更简单的方式？当然有，`$attrs` 闪亮登场！\n\n#### 解决方案：用 `$attrs` 动态绑定属性\n\n`$attrs` 是 Vue3 提供的一个神奇属性，它会自动收集父组件传递的所有非 `props` 参数。我们可以用 `v-bind=\"$attrs\"` 将这些参数一股脑绑定到子组件上。\n\n改造后的代码：\n\n```vue\n<a-modal\n  v-model:visible=\"visible\"\n  :getContainer=\"() => $refs.myModal\"\n  :style=\"{ width: '560px', ...style }\"\n  destroyOnClose\n  v-bind=\"$attrs\"\n>\n  <slot></slot>\n</a-modal>\n```\n\n父组件想加啥属性都随意，`$attrs` 会帮你兜底：\n\n```vue\n<CustomModal :footer=\"null\" :centered=\"false\" :zIndex=\"9999\"></CustomModal>\n```\n\n再也不用频繁修改组件代码了，舒服！\n\n---\n\n### 问题 2：插槽的“加班地狱”\n\nUI 组件通常提供多个插槽，比如 `a-modal` 的 `title`、`footer` 等。如果我们逐一定义这些插槽，代码会变得又臭又长：\n\n```vue\n<a-modal>\n  <!-- 默认插槽 -->\n  <slot></slot>\n\n  <!-- 标题插槽 -->\n  <template #title>\n    <slot name=\"title\">{{ title }}</slot>\n  </template>\n\n  <!-- 页脚插槽 -->\n  <template #footer>\n    <slot name=\"footer\"></slot>\n  </template>\n</a-modal>\n```\n\n一旦组件新增了插槽，就得加班修改代码。有没有更优雅的方式？当然有，`$slots` 来解救你！\n\n#### 解决方案：动态绑定插槽\n\n`$slots` 是 Vue 提供的另一个神奇属性，它会自动收集父组件传递的所有插槽。我们可以动态遍历 `$slots`，将它们绑定到子组件上。\n\n改造后的代码：\n\n```vue\n<a-modal>\n  <template v-for=\"(_val, name) in $slots\" #[name]=\"options\">\n    <slot :name=\"name\" v-bind=\"options || {}\"></slot>\n  </template>\n</a-modal>\n```\n\n父组件传递的插槽会自动绑定到 `a-modal` 上，无需手动定义。\n\n使用示例：\n\n```vue\n<CustomModal>\n  <template #title=\"{ arg1, arg2 }\">\n    自定义标题\n  </template>\n</CustomModal>\n```\n\n---\n\n### 问题 3：`v-model` 的“控制权之争”\n\n目前，我们需要通过 `ref` 来控制弹窗的显示和隐藏：\n\n```vue\n<CustomModal ref=\"modalRef\"></CustomModal>\n```\n\n但这种方式不够直观。我们可以通过 Vue3 的 `v-model` 语法糖，让父组件直接控制弹窗的显隐。\n\n#### 改造代码：支持 `v-model`\n\n我们可以监听 `props.visible`，并通过事件同步状态：\n\n```vue\n<template>\n  <div ref=\"myModal\" class=\"custom-modal\"></div>\n  <a-modal\n    :visible=\"visible\"\n    v-bind=\"$attrs\"\n  >\n    <template v-for=\"(_val, name) in $slots\" #[name]=\"ops\">\n      <slot :name=\"name\" v-bind=\"ops || {}\"></slot>\n    </template>\n  </a-modal>\n</template>\n\n<script setup>\ndefineProps([\"visible\"]);\nconst emit = defineEmits(); // Vue3 会自动处理 \"update:visible\"\n\nwatch(\n  () => props.visible,\n  (newVal) => emit(\"update:visible\", newVal)\n);\n</script>\n```\n\n使用方式：\n\n```vue\n<CustomModal v-model:visible=\"modalVisible\"></CustomModal>\n```\n\n---\n\n## 3. 完整代码示例\n\n最终封装组件如下：\n\n```vue\n<template>\n  <div ref=\"myModal\" class=\"custom-modal\"></div>\n  <a-modal\n    :visible=\"visible\"\n    destroyOnClose\n    v-bind=\"$attrs\"\n  >\n    <template v-for=\"(_val, name) in $slots\" #[name]=\"ops\">\n      <slot :name=\"name\" v-bind=\"ops || {}\"></slot>\n    </template>\n  </a-modal>\n</template>\n\n<script setup>\ndefineProps([\"visible\"]);\nconst emit = defineEmits();\n\nwatch(\n  () => props.visible,\n  (newVal) => emit(\"update:visible\", newVal)\n);\n</script>\n\n<style lang=\"less\" scoped>\n.custom-modal {\n  // 样式代码\n}\n</style>\n```\n\n---\n\n## 4. 总结：封装组件的“深坑”\n\n封装组件不是一件轻松的事，尤其是当需求越来越复杂时。以下是一些常见的“深坑”：\n\n1. **属性扩展问题**：频繁新增 `props` 会导致组件代码臃肿。\n   - **解决方案**：使用 `$attrs` 动态绑定属性。\n\n2. **插槽管理问题**：手动定义插槽过于繁琐。\n   - **解决方案**：使用 `$slots` 动态绑定插槽。\n\n3. **状态同步问题**：显隐控制不够直观。\n   - **解决方案**：通过 `v-model` 实现状态同步。\n\n---\n\n## 5. 展望：封装组件的“无限可能”\n\n在实际开发中，封装组件还会遇到以下问题：\n\n- **复杂交互逻辑**：如何封装支持多种交互的组件？\n- **性能优化**：如何避免组件封装导致的性能问题？\n- **通用性扩展**：如何设计更通用的组件，适配更多场景？\n\n这些问题等待下次文章继续讨论进阶。如果你有更好的思路，欢迎交流！\n","source":"_posts/Vue3组件封装的正确姿势.md","raw":"---\ntitle: Vue3 组件封装：让 UI 组件库“乖乖听话”的正确姿势\n---\n\n在日常开发中，UI 组件库（比如 Ant Design Vue、Element Plus）就像外卖快餐，方便快捷，但总有点“不合胃口”。于是，为了让这些组件更符合我们的需求，我们常常需要对它们进行二次封装。本文将带你体验如何用 Vue3 的 `$attrs` 和 `$slots`，优雅地“调教”这些组件，让它们更灵活、更贴合项目需求。\n\n当然，封装组件这件事儿，说起来简单，做起来就像修水管——一开始觉得能搞定，结果越修越漏。别急，我们会逐步分析封装过程中可能遇到的问题，并给出解决方案。\n\n---\n\n## 1. 需求背景：为什么要封装？\n\n假设我们在项目中频繁使用 Ant Design Vue 的 `a-modal` 组件，但总有一些“个性化需求”需要实现，比如：\n\n- 修改弹窗样式\n- 自定义按钮文字\n- 每次关闭后销毁内容\n- 将弹窗渲染到指定元素上\n\n于是，我们封装了一个自定义弹窗组件，代码如下：\n\n```vue\n<template>\n  <div ref=\"myModal\" class=\"custom-modal\"></div>\n  <a-modal\n    v-model:visible=\"visible\"\n    centered\n    destroyOnClose\n    :getContainer=\"() => $refs.myModal\"\n    @ok=\"handleOk\"\n    @cancel=\"handleCancel\"\n    :style=\"{ width: '560px', ...style }\"\n    :cancelText=\"cancelText\"\n    :okText=\"okText\"\n  >\n    <slot></slot>\n  </a-modal>\n</template>\n\n<script setup>\nconst props = defineProps({\n  title: { type: String, default: \"\" },\n  style: { type: Object, default: () => ({}) },\n  cancelText: { type: String, default: \"取消\" },\n  okText: { type: String, default: \"确定\" },\n});\nconst emits = defineEmits([\"handleOk\", \"handleCancel\"]);\nconst visible = ref(false);\n\nconst handleOk = () => emits(\"handleOk\");\nconst handleCancel = () => emits(\"handleCancel\");\n\ndefineExpose({ visible });\n</script>\n\n<style lang=\"less\" scoped>\n.custom-modal {\n  :deep(.ant-modal) {\n    // 样式代码省略\n  }\n}\n</style>\n```\n\n看起来还不错，对吧？我们可以这样使用它：\n\n```vue\n<CustomModal ref=\"xxxModal\" title=\"提示\" @ok=\"onOk\" @cancel=\"onCancel\">\n  内容区域\n</CustomModal>\n```\n\n但别高兴太早，问题很快就来了。\n\n---\n\n## 2. 问题来了：组件封装中的“烦恼”\n\n### 问题 1：属性扩展的“无底洞”\n\n同事 A 说：“我想去掉右上角的关闭按钮，能不能加个 `closable` 属性？”\n\n同事 B 说：“我想让弹窗不居中显示，能不能加个 `centered` 属性？”\n\n同事 C 说：“我的需求比较特别，我想让弹窗的 z-index 是 9999。”\n\n于是，代码开始膨胀：\n\n```vue\n<a-modal :closable=\"closable\" :centered=\"centered\" :zIndex=\"zIndex\"></a-modal>\n\n<script setup>\nconst props = defineProps({\n  closable: { type: Boolean, default: true },\n  centered: { type: Boolean, default: true },\n  zIndex: { type: Number, default: 1000 },\n});\n</script>\n```\n\n每次有新需求，就得改组件代码，最终变成一个“巨无霸”组件。有没有更简单的方式？当然有，`$attrs` 闪亮登场！\n\n#### 解决方案：用 `$attrs` 动态绑定属性\n\n`$attrs` 是 Vue3 提供的一个神奇属性，它会自动收集父组件传递的所有非 `props` 参数。我们可以用 `v-bind=\"$attrs\"` 将这些参数一股脑绑定到子组件上。\n\n改造后的代码：\n\n```vue\n<a-modal\n  v-model:visible=\"visible\"\n  :getContainer=\"() => $refs.myModal\"\n  :style=\"{ width: '560px', ...style }\"\n  destroyOnClose\n  v-bind=\"$attrs\"\n>\n  <slot></slot>\n</a-modal>\n```\n\n父组件想加啥属性都随意，`$attrs` 会帮你兜底：\n\n```vue\n<CustomModal :footer=\"null\" :centered=\"false\" :zIndex=\"9999\"></CustomModal>\n```\n\n再也不用频繁修改组件代码了，舒服！\n\n---\n\n### 问题 2：插槽的“加班地狱”\n\nUI 组件通常提供多个插槽，比如 `a-modal` 的 `title`、`footer` 等。如果我们逐一定义这些插槽，代码会变得又臭又长：\n\n```vue\n<a-modal>\n  <!-- 默认插槽 -->\n  <slot></slot>\n\n  <!-- 标题插槽 -->\n  <template #title>\n    <slot name=\"title\">{{ title }}</slot>\n  </template>\n\n  <!-- 页脚插槽 -->\n  <template #footer>\n    <slot name=\"footer\"></slot>\n  </template>\n</a-modal>\n```\n\n一旦组件新增了插槽，就得加班修改代码。有没有更优雅的方式？当然有，`$slots` 来解救你！\n\n#### 解决方案：动态绑定插槽\n\n`$slots` 是 Vue 提供的另一个神奇属性，它会自动收集父组件传递的所有插槽。我们可以动态遍历 `$slots`，将它们绑定到子组件上。\n\n改造后的代码：\n\n```vue\n<a-modal>\n  <template v-for=\"(_val, name) in $slots\" #[name]=\"options\">\n    <slot :name=\"name\" v-bind=\"options || {}\"></slot>\n  </template>\n</a-modal>\n```\n\n父组件传递的插槽会自动绑定到 `a-modal` 上，无需手动定义。\n\n使用示例：\n\n```vue\n<CustomModal>\n  <template #title=\"{ arg1, arg2 }\">\n    自定义标题\n  </template>\n</CustomModal>\n```\n\n---\n\n### 问题 3：`v-model` 的“控制权之争”\n\n目前，我们需要通过 `ref` 来控制弹窗的显示和隐藏：\n\n```vue\n<CustomModal ref=\"modalRef\"></CustomModal>\n```\n\n但这种方式不够直观。我们可以通过 Vue3 的 `v-model` 语法糖，让父组件直接控制弹窗的显隐。\n\n#### 改造代码：支持 `v-model`\n\n我们可以监听 `props.visible`，并通过事件同步状态：\n\n```vue\n<template>\n  <div ref=\"myModal\" class=\"custom-modal\"></div>\n  <a-modal\n    :visible=\"visible\"\n    v-bind=\"$attrs\"\n  >\n    <template v-for=\"(_val, name) in $slots\" #[name]=\"ops\">\n      <slot :name=\"name\" v-bind=\"ops || {}\"></slot>\n    </template>\n  </a-modal>\n</template>\n\n<script setup>\ndefineProps([\"visible\"]);\nconst emit = defineEmits(); // Vue3 会自动处理 \"update:visible\"\n\nwatch(\n  () => props.visible,\n  (newVal) => emit(\"update:visible\", newVal)\n);\n</script>\n```\n\n使用方式：\n\n```vue\n<CustomModal v-model:visible=\"modalVisible\"></CustomModal>\n```\n\n---\n\n## 3. 完整代码示例\n\n最终封装组件如下：\n\n```vue\n<template>\n  <div ref=\"myModal\" class=\"custom-modal\"></div>\n  <a-modal\n    :visible=\"visible\"\n    destroyOnClose\n    v-bind=\"$attrs\"\n  >\n    <template v-for=\"(_val, name) in $slots\" #[name]=\"ops\">\n      <slot :name=\"name\" v-bind=\"ops || {}\"></slot>\n    </template>\n  </a-modal>\n</template>\n\n<script setup>\ndefineProps([\"visible\"]);\nconst emit = defineEmits();\n\nwatch(\n  () => props.visible,\n  (newVal) => emit(\"update:visible\", newVal)\n);\n</script>\n\n<style lang=\"less\" scoped>\n.custom-modal {\n  // 样式代码\n}\n</style>\n```\n\n---\n\n## 4. 总结：封装组件的“深坑”\n\n封装组件不是一件轻松的事，尤其是当需求越来越复杂时。以下是一些常见的“深坑”：\n\n1. **属性扩展问题**：频繁新增 `props` 会导致组件代码臃肿。\n   - **解决方案**：使用 `$attrs` 动态绑定属性。\n\n2. **插槽管理问题**：手动定义插槽过于繁琐。\n   - **解决方案**：使用 `$slots` 动态绑定插槽。\n\n3. **状态同步问题**：显隐控制不够直观。\n   - **解决方案**：通过 `v-model` 实现状态同步。\n\n---\n\n## 5. 展望：封装组件的“无限可能”\n\n在实际开发中，封装组件还会遇到以下问题：\n\n- **复杂交互逻辑**：如何封装支持多种交互的组件？\n- **性能优化**：如何避免组件封装导致的性能问题？\n- **通用性扩展**：如何设计更通用的组件，适配更多场景？\n\n这些问题等待下次文章继续讨论进阶。如果你有更好的思路，欢迎交流！\n","slug":"Vue3组件封装的正确姿势","published":1,"date":"2025-02-17T03:38:30.720Z","updated":"2025-02-17T03:38:53.047Z","comments":1,"layout":"post","photos":[],"_id":"cm78w6s4i0000wgkl8cdq6x1t","content":"<p>在日常开发中，UI 组件库（比如 Ant Design Vue、Element Plus）就像外卖快餐，方便快捷，但总有点“不合胃口”。于是，为了让这些组件更符合我们的需求，我们常常需要对它们进行二次封装。本文将带你体验如何用 Vue3 的 <code>$attrs</code> 和 <code>$slots</code>，优雅地“调教”这些组件，让它们更灵活、更贴合项目需求。</p>\n<p>当然，封装组件这件事儿，说起来简单，做起来就像修水管——一开始觉得能搞定，结果越修越漏。别急，我们会逐步分析封装过程中可能遇到的问题，并给出解决方案。</p>\n<hr>\n<h2 id=\"1-需求背景：为什么要封装？\"><a href=\"#1-需求背景：为什么要封装？\" class=\"headerlink\" title=\"1. 需求背景：为什么要封装？\"></a>1. 需求背景：为什么要封装？</h2><p>假设我们在项目中频繁使用 Ant Design Vue 的 <code>a-modal</code> 组件，但总有一些“个性化需求”需要实现，比如：</p>\n<ul>\n<li>修改弹窗样式</li>\n<li>自定义按钮文字</li>\n<li>每次关闭后销毁内容</li>\n<li>将弹窗渲染到指定元素上</li>\n</ul>\n<p>于是，我们封装了一个自定义弹窗组件，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div ref=&quot;myModal&quot; class=&quot;custom-modal&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;a-modal</span><br><span class=\"line\">    v-model:visible=&quot;visible&quot;</span><br><span class=\"line\">    centered</span><br><span class=\"line\">    destroyOnClose</span><br><span class=\"line\">    :getContainer=&quot;() =&gt; $refs.myModal&quot;</span><br><span class=\"line\">    @ok=&quot;handleOk&quot;</span><br><span class=\"line\">    @cancel=&quot;handleCancel&quot;</span><br><span class=\"line\">    :style=&quot;&#123; width: &#x27;560px&#x27;, ...style &#125;&quot;</span><br><span class=\"line\">    :cancelText=&quot;cancelText&quot;</span><br><span class=\"line\">    :okText=&quot;okText&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class=\"line\">  &lt;/a-modal&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">const props = defineProps(&#123;</span><br><span class=\"line\">  title: &#123; type: String, default: &quot;&quot; &#125;,</span><br><span class=\"line\">  style: &#123; type: Object, default: () =&gt; (&#123;&#125;) &#125;,</span><br><span class=\"line\">  cancelText: &#123; type: String, default: &quot;取消&quot; &#125;,</span><br><span class=\"line\">  okText: &#123; type: String, default: &quot;确定&quot; &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">const emits = defineEmits([&quot;handleOk&quot;, &quot;handleCancel&quot;]);</span><br><span class=\"line\">const visible = ref(false);</span><br><span class=\"line\"></span><br><span class=\"line\">const handleOk = () =&gt; emits(&quot;handleOk&quot;);</span><br><span class=\"line\">const handleCancel = () =&gt; emits(&quot;handleCancel&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">defineExpose(&#123; visible &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class=\"line\">.custom-modal &#123;</span><br><span class=\"line\">  :deep(.ant-modal) &#123;</span><br><span class=\"line\">    // 样式代码省略</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>看起来还不错，对吧？我们可以这样使用它：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;CustomModal ref=&quot;xxxModal&quot; title=&quot;提示&quot; @ok=&quot;onOk&quot; @cancel=&quot;onCancel&quot;&gt;</span><br><span class=\"line\">  内容区域</span><br><span class=\"line\">&lt;/CustomModal&gt;</span><br></pre></td></tr></table></figure>\n\n<p>但别高兴太早，问题很快就来了。</p>\n<hr>\n<h2 id=\"2-问题来了：组件封装中的“烦恼”\"><a href=\"#2-问题来了：组件封装中的“烦恼”\" class=\"headerlink\" title=\"2. 问题来了：组件封装中的“烦恼”\"></a>2. 问题来了：组件封装中的“烦恼”</h2><h3 id=\"问题-1：属性扩展的“无底洞”\"><a href=\"#问题-1：属性扩展的“无底洞”\" class=\"headerlink\" title=\"问题 1：属性扩展的“无底洞”\"></a>问题 1：属性扩展的“无底洞”</h3><p>同事 A 说：“我想去掉右上角的关闭按钮，能不能加个 <code>closable</code> 属性？”</p>\n<p>同事 B 说：“我想让弹窗不居中显示，能不能加个 <code>centered</code> 属性？”</p>\n<p>同事 C 说：“我的需求比较特别，我想让弹窗的 z-index 是 9999。”</p>\n<p>于是，代码开始膨胀：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a-modal :closable=&quot;closable&quot; :centered=&quot;centered&quot; :zIndex=&quot;zIndex&quot;&gt;&lt;/a-modal&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">const props = defineProps(&#123;</span><br><span class=\"line\">  closable: &#123; type: Boolean, default: true &#125;,</span><br><span class=\"line\">  centered: &#123; type: Boolean, default: true &#125;,</span><br><span class=\"line\">  zIndex: &#123; type: Number, default: 1000 &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>每次有新需求，就得改组件代码，最终变成一个“巨无霸”组件。有没有更简单的方式？当然有，<code>$attrs</code> 闪亮登场！</p>\n<h4 id=\"解决方案：用-attrs-动态绑定属性\"><a href=\"#解决方案：用-attrs-动态绑定属性\" class=\"headerlink\" title=\"解决方案：用 $attrs 动态绑定属性\"></a>解决方案：用 <code>$attrs</code> 动态绑定属性</h4><p><code>$attrs</code> 是 Vue3 提供的一个神奇属性，它会自动收集父组件传递的所有非 <code>props</code> 参数。我们可以用 <code>v-bind=&quot;$attrs&quot;</code> 将这些参数一股脑绑定到子组件上。</p>\n<p>改造后的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a-modal</span><br><span class=\"line\">  v-model:visible=&quot;visible&quot;</span><br><span class=\"line\">  :getContainer=&quot;() =&gt; $refs.myModal&quot;</span><br><span class=\"line\">  :style=&quot;&#123; width: &#x27;560px&#x27;, ...style &#125;&quot;</span><br><span class=\"line\">  destroyOnClose</span><br><span class=\"line\">  v-bind=&quot;$attrs&quot;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;slot&gt;&lt;/slot&gt;</span><br><span class=\"line\">&lt;/a-modal&gt;</span><br></pre></td></tr></table></figure>\n\n<p>父组件想加啥属性都随意，<code>$attrs</code> 会帮你兜底：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;CustomModal :footer=&quot;null&quot; :centered=&quot;false&quot; :zIndex=&quot;9999&quot;&gt;&lt;/CustomModal&gt;</span><br></pre></td></tr></table></figure>\n\n<p>再也不用频繁修改组件代码了，舒服！</p>\n<hr>\n<h3 id=\"问题-2：插槽的“加班地狱”\"><a href=\"#问题-2：插槽的“加班地狱”\" class=\"headerlink\" title=\"问题 2：插槽的“加班地狱”\"></a>问题 2：插槽的“加班地狱”</h3><p>UI 组件通常提供多个插槽，比如 <code>a-modal</code> 的 <code>title</code>、<code>footer</code> 等。如果我们逐一定义这些插槽，代码会变得又臭又长：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a-modal&gt;</span><br><span class=\"line\">  &lt;!-- 默认插槽 --&gt;</span><br><span class=\"line\">  &lt;slot&gt;&lt;/slot&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;!-- 标题插槽 --&gt;</span><br><span class=\"line\">  &lt;template #title&gt;</span><br><span class=\"line\">    &lt;slot name=&quot;title&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/slot&gt;</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;!-- 页脚插槽 --&gt;</span><br><span class=\"line\">  &lt;template #footer&gt;</span><br><span class=\"line\">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\">&lt;/a-modal&gt;</span><br></pre></td></tr></table></figure>\n\n<p>一旦组件新增了插槽，就得加班修改代码。有没有更优雅的方式？当然有，<code>$slots</code> 来解救你！</p>\n<h4 id=\"解决方案：动态绑定插槽\"><a href=\"#解决方案：动态绑定插槽\" class=\"headerlink\" title=\"解决方案：动态绑定插槽\"></a>解决方案：动态绑定插槽</h4><p><code>$slots</code> 是 Vue 提供的另一个神奇属性，它会自动收集父组件传递的所有插槽。我们可以动态遍历 <code>$slots</code>，将它们绑定到子组件上。</p>\n<p>改造后的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a-modal&gt;</span><br><span class=\"line\">  &lt;template v-for=&quot;(_val, name) in $slots&quot; #[name]=&quot;options&quot;&gt;</span><br><span class=\"line\">    &lt;slot :name=&quot;name&quot; v-bind=&quot;options || &#123;&#125;&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\">&lt;/a-modal&gt;</span><br></pre></td></tr></table></figure>\n\n<p>父组件传递的插槽会自动绑定到 <code>a-modal</code> 上，无需手动定义。</p>\n<p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;CustomModal&gt;</span><br><span class=\"line\">  &lt;template #title=&quot;&#123; arg1, arg2 &#125;&quot;&gt;</span><br><span class=\"line\">    自定义标题</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\">&lt;/CustomModal&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"问题-3：v-model-的“控制权之争”\"><a href=\"#问题-3：v-model-的“控制权之争”\" class=\"headerlink\" title=\"问题 3：v-model 的“控制权之争”\"></a>问题 3：<code>v-model</code> 的“控制权之争”</h3><p>目前，我们需要通过 <code>ref</code> 来控制弹窗的显示和隐藏：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;CustomModal ref=&quot;modalRef&quot;&gt;&lt;/CustomModal&gt;</span><br></pre></td></tr></table></figure>\n\n<p>但这种方式不够直观。我们可以通过 Vue3 的 <code>v-model</code> 语法糖，让父组件直接控制弹窗的显隐。</p>\n<h4 id=\"改造代码：支持-v-model\"><a href=\"#改造代码：支持-v-model\" class=\"headerlink\" title=\"改造代码：支持 v-model\"></a>改造代码：支持 <code>v-model</code></h4><p>我们可以监听 <code>props.visible</code>，并通过事件同步状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div ref=&quot;myModal&quot; class=&quot;custom-modal&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;a-modal</span><br><span class=\"line\">    :visible=&quot;visible&quot;</span><br><span class=\"line\">    v-bind=&quot;$attrs&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    &lt;template v-for=&quot;(_val, name) in $slots&quot; #[name]=&quot;ops&quot;&gt;</span><br><span class=\"line\">      &lt;slot :name=&quot;name&quot; v-bind=&quot;ops || &#123;&#125;&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">  &lt;/a-modal&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">defineProps([&quot;visible&quot;]);</span><br><span class=\"line\">const emit = defineEmits(); // Vue3 会自动处理 &quot;update:visible&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">watch(</span><br><span class=\"line\">  () =&gt; props.visible,</span><br><span class=\"line\">  (newVal) =&gt; emit(&quot;update:visible&quot;, newVal)</span><br><span class=\"line\">);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;CustomModal v-model:visible=&quot;modalVisible&quot;&gt;&lt;/CustomModal&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"3-完整代码示例\"><a href=\"#3-完整代码示例\" class=\"headerlink\" title=\"3. 完整代码示例\"></a>3. 完整代码示例</h2><p>最终封装组件如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div ref=&quot;myModal&quot; class=&quot;custom-modal&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;a-modal</span><br><span class=\"line\">    :visible=&quot;visible&quot;</span><br><span class=\"line\">    destroyOnClose</span><br><span class=\"line\">    v-bind=&quot;$attrs&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    &lt;template v-for=&quot;(_val, name) in $slots&quot; #[name]=&quot;ops&quot;&gt;</span><br><span class=\"line\">      &lt;slot :name=&quot;name&quot; v-bind=&quot;ops || &#123;&#125;&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">  &lt;/a-modal&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">defineProps([&quot;visible&quot;]);</span><br><span class=\"line\">const emit = defineEmits();</span><br><span class=\"line\"></span><br><span class=\"line\">watch(</span><br><span class=\"line\">  () =&gt; props.visible,</span><br><span class=\"line\">  (newVal) =&gt; emit(&quot;update:visible&quot;, newVal)</span><br><span class=\"line\">);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class=\"line\">.custom-modal &#123;</span><br><span class=\"line\">  // 样式代码</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"4-总结：封装组件的“深坑”\"><a href=\"#4-总结：封装组件的“深坑”\" class=\"headerlink\" title=\"4. 总结：封装组件的“深坑”\"></a>4. 总结：封装组件的“深坑”</h2><p>封装组件不是一件轻松的事，尤其是当需求越来越复杂时。以下是一些常见的“深坑”：</p>\n<ol>\n<li><p><strong>属性扩展问题</strong>：频繁新增 <code>props</code> 会导致组件代码臃肿。</p>\n<ul>\n<li><strong>解决方案</strong>：使用 <code>$attrs</code> 动态绑定属性。</li>\n</ul>\n</li>\n<li><p><strong>插槽管理问题</strong>：手动定义插槽过于繁琐。</p>\n<ul>\n<li><strong>解决方案</strong>：使用 <code>$slots</code> 动态绑定插槽。</li>\n</ul>\n</li>\n<li><p><strong>状态同步问题</strong>：显隐控制不够直观。</p>\n<ul>\n<li><strong>解决方案</strong>：通过 <code>v-model</code> 实现状态同步。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"5-展望：封装组件的“无限可能”\"><a href=\"#5-展望：封装组件的“无限可能”\" class=\"headerlink\" title=\"5. 展望：封装组件的“无限可能”\"></a>5. 展望：封装组件的“无限可能”</h2><p>在实际开发中，封装组件还会遇到以下问题：</p>\n<ul>\n<li><strong>复杂交互逻辑</strong>：如何封装支持多种交互的组件？</li>\n<li><strong>性能优化</strong>：如何避免组件封装导致的性能问题？</li>\n<li><strong>通用性扩展</strong>：如何设计更通用的组件，适配更多场景？</li>\n</ul>\n<p>这些问题等待下次文章继续讨论进阶。如果你有更好的思路，欢迎交流！</p>\n","excerpt":"","more":"<p>在日常开发中，UI 组件库（比如 Ant Design Vue、Element Plus）就像外卖快餐，方便快捷，但总有点“不合胃口”。于是，为了让这些组件更符合我们的需求，我们常常需要对它们进行二次封装。本文将带你体验如何用 Vue3 的 <code>$attrs</code> 和 <code>$slots</code>，优雅地“调教”这些组件，让它们更灵活、更贴合项目需求。</p>\n<p>当然，封装组件这件事儿，说起来简单，做起来就像修水管——一开始觉得能搞定，结果越修越漏。别急，我们会逐步分析封装过程中可能遇到的问题，并给出解决方案。</p>\n<hr>\n<h2 id=\"1-需求背景：为什么要封装？\"><a href=\"#1-需求背景：为什么要封装？\" class=\"headerlink\" title=\"1. 需求背景：为什么要封装？\"></a>1. 需求背景：为什么要封装？</h2><p>假设我们在项目中频繁使用 Ant Design Vue 的 <code>a-modal</code> 组件，但总有一些“个性化需求”需要实现，比如：</p>\n<ul>\n<li>修改弹窗样式</li>\n<li>自定义按钮文字</li>\n<li>每次关闭后销毁内容</li>\n<li>将弹窗渲染到指定元素上</li>\n</ul>\n<p>于是，我们封装了一个自定义弹窗组件，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div ref=&quot;myModal&quot; class=&quot;custom-modal&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;a-modal</span><br><span class=\"line\">    v-model:visible=&quot;visible&quot;</span><br><span class=\"line\">    centered</span><br><span class=\"line\">    destroyOnClose</span><br><span class=\"line\">    :getContainer=&quot;() =&gt; $refs.myModal&quot;</span><br><span class=\"line\">    @ok=&quot;handleOk&quot;</span><br><span class=\"line\">    @cancel=&quot;handleCancel&quot;</span><br><span class=\"line\">    :style=&quot;&#123; width: &#x27;560px&#x27;, ...style &#125;&quot;</span><br><span class=\"line\">    :cancelText=&quot;cancelText&quot;</span><br><span class=\"line\">    :okText=&quot;okText&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class=\"line\">  &lt;/a-modal&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">const props = defineProps(&#123;</span><br><span class=\"line\">  title: &#123; type: String, default: &quot;&quot; &#125;,</span><br><span class=\"line\">  style: &#123; type: Object, default: () =&gt; (&#123;&#125;) &#125;,</span><br><span class=\"line\">  cancelText: &#123; type: String, default: &quot;取消&quot; &#125;,</span><br><span class=\"line\">  okText: &#123; type: String, default: &quot;确定&quot; &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">const emits = defineEmits([&quot;handleOk&quot;, &quot;handleCancel&quot;]);</span><br><span class=\"line\">const visible = ref(false);</span><br><span class=\"line\"></span><br><span class=\"line\">const handleOk = () =&gt; emits(&quot;handleOk&quot;);</span><br><span class=\"line\">const handleCancel = () =&gt; emits(&quot;handleCancel&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">defineExpose(&#123; visible &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class=\"line\">.custom-modal &#123;</span><br><span class=\"line\">  :deep(.ant-modal) &#123;</span><br><span class=\"line\">    // 样式代码省略</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>看起来还不错，对吧？我们可以这样使用它：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;CustomModal ref=&quot;xxxModal&quot; title=&quot;提示&quot; @ok=&quot;onOk&quot; @cancel=&quot;onCancel&quot;&gt;</span><br><span class=\"line\">  内容区域</span><br><span class=\"line\">&lt;/CustomModal&gt;</span><br></pre></td></tr></table></figure>\n\n<p>但别高兴太早，问题很快就来了。</p>\n<hr>\n<h2 id=\"2-问题来了：组件封装中的“烦恼”\"><a href=\"#2-问题来了：组件封装中的“烦恼”\" class=\"headerlink\" title=\"2. 问题来了：组件封装中的“烦恼”\"></a>2. 问题来了：组件封装中的“烦恼”</h2><h3 id=\"问题-1：属性扩展的“无底洞”\"><a href=\"#问题-1：属性扩展的“无底洞”\" class=\"headerlink\" title=\"问题 1：属性扩展的“无底洞”\"></a>问题 1：属性扩展的“无底洞”</h3><p>同事 A 说：“我想去掉右上角的关闭按钮，能不能加个 <code>closable</code> 属性？”</p>\n<p>同事 B 说：“我想让弹窗不居中显示，能不能加个 <code>centered</code> 属性？”</p>\n<p>同事 C 说：“我的需求比较特别，我想让弹窗的 z-index 是 9999。”</p>\n<p>于是，代码开始膨胀：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a-modal :closable=&quot;closable&quot; :centered=&quot;centered&quot; :zIndex=&quot;zIndex&quot;&gt;&lt;/a-modal&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">const props = defineProps(&#123;</span><br><span class=\"line\">  closable: &#123; type: Boolean, default: true &#125;,</span><br><span class=\"line\">  centered: &#123; type: Boolean, default: true &#125;,</span><br><span class=\"line\">  zIndex: &#123; type: Number, default: 1000 &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>每次有新需求，就得改组件代码，最终变成一个“巨无霸”组件。有没有更简单的方式？当然有，<code>$attrs</code> 闪亮登场！</p>\n<h4 id=\"解决方案：用-attrs-动态绑定属性\"><a href=\"#解决方案：用-attrs-动态绑定属性\" class=\"headerlink\" title=\"解决方案：用 $attrs 动态绑定属性\"></a>解决方案：用 <code>$attrs</code> 动态绑定属性</h4><p><code>$attrs</code> 是 Vue3 提供的一个神奇属性，它会自动收集父组件传递的所有非 <code>props</code> 参数。我们可以用 <code>v-bind=&quot;$attrs&quot;</code> 将这些参数一股脑绑定到子组件上。</p>\n<p>改造后的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a-modal</span><br><span class=\"line\">  v-model:visible=&quot;visible&quot;</span><br><span class=\"line\">  :getContainer=&quot;() =&gt; $refs.myModal&quot;</span><br><span class=\"line\">  :style=&quot;&#123; width: &#x27;560px&#x27;, ...style &#125;&quot;</span><br><span class=\"line\">  destroyOnClose</span><br><span class=\"line\">  v-bind=&quot;$attrs&quot;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;slot&gt;&lt;/slot&gt;</span><br><span class=\"line\">&lt;/a-modal&gt;</span><br></pre></td></tr></table></figure>\n\n<p>父组件想加啥属性都随意，<code>$attrs</code> 会帮你兜底：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;CustomModal :footer=&quot;null&quot; :centered=&quot;false&quot; :zIndex=&quot;9999&quot;&gt;&lt;/CustomModal&gt;</span><br></pre></td></tr></table></figure>\n\n<p>再也不用频繁修改组件代码了，舒服！</p>\n<hr>\n<h3 id=\"问题-2：插槽的“加班地狱”\"><a href=\"#问题-2：插槽的“加班地狱”\" class=\"headerlink\" title=\"问题 2：插槽的“加班地狱”\"></a>问题 2：插槽的“加班地狱”</h3><p>UI 组件通常提供多个插槽，比如 <code>a-modal</code> 的 <code>title</code>、<code>footer</code> 等。如果我们逐一定义这些插槽，代码会变得又臭又长：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a-modal&gt;</span><br><span class=\"line\">  &lt;!-- 默认插槽 --&gt;</span><br><span class=\"line\">  &lt;slot&gt;&lt;/slot&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;!-- 标题插槽 --&gt;</span><br><span class=\"line\">  &lt;template #title&gt;</span><br><span class=\"line\">    &lt;slot name=&quot;title&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/slot&gt;</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;!-- 页脚插槽 --&gt;</span><br><span class=\"line\">  &lt;template #footer&gt;</span><br><span class=\"line\">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\">&lt;/a-modal&gt;</span><br></pre></td></tr></table></figure>\n\n<p>一旦组件新增了插槽，就得加班修改代码。有没有更优雅的方式？当然有，<code>$slots</code> 来解救你！</p>\n<h4 id=\"解决方案：动态绑定插槽\"><a href=\"#解决方案：动态绑定插槽\" class=\"headerlink\" title=\"解决方案：动态绑定插槽\"></a>解决方案：动态绑定插槽</h4><p><code>$slots</code> 是 Vue 提供的另一个神奇属性，它会自动收集父组件传递的所有插槽。我们可以动态遍历 <code>$slots</code>，将它们绑定到子组件上。</p>\n<p>改造后的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a-modal&gt;</span><br><span class=\"line\">  &lt;template v-for=&quot;(_val, name) in $slots&quot; #[name]=&quot;options&quot;&gt;</span><br><span class=\"line\">    &lt;slot :name=&quot;name&quot; v-bind=&quot;options || &#123;&#125;&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\">&lt;/a-modal&gt;</span><br></pre></td></tr></table></figure>\n\n<p>父组件传递的插槽会自动绑定到 <code>a-modal</code> 上，无需手动定义。</p>\n<p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;CustomModal&gt;</span><br><span class=\"line\">  &lt;template #title=&quot;&#123; arg1, arg2 &#125;&quot;&gt;</span><br><span class=\"line\">    自定义标题</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\">&lt;/CustomModal&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"问题-3：v-model-的“控制权之争”\"><a href=\"#问题-3：v-model-的“控制权之争”\" class=\"headerlink\" title=\"问题 3：v-model 的“控制权之争”\"></a>问题 3：<code>v-model</code> 的“控制权之争”</h3><p>目前，我们需要通过 <code>ref</code> 来控制弹窗的显示和隐藏：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;CustomModal ref=&quot;modalRef&quot;&gt;&lt;/CustomModal&gt;</span><br></pre></td></tr></table></figure>\n\n<p>但这种方式不够直观。我们可以通过 Vue3 的 <code>v-model</code> 语法糖，让父组件直接控制弹窗的显隐。</p>\n<h4 id=\"改造代码：支持-v-model\"><a href=\"#改造代码：支持-v-model\" class=\"headerlink\" title=\"改造代码：支持 v-model\"></a>改造代码：支持 <code>v-model</code></h4><p>我们可以监听 <code>props.visible</code>，并通过事件同步状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div ref=&quot;myModal&quot; class=&quot;custom-modal&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;a-modal</span><br><span class=\"line\">    :visible=&quot;visible&quot;</span><br><span class=\"line\">    v-bind=&quot;$attrs&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    &lt;template v-for=&quot;(_val, name) in $slots&quot; #[name]=&quot;ops&quot;&gt;</span><br><span class=\"line\">      &lt;slot :name=&quot;name&quot; v-bind=&quot;ops || &#123;&#125;&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">  &lt;/a-modal&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">defineProps([&quot;visible&quot;]);</span><br><span class=\"line\">const emit = defineEmits(); // Vue3 会自动处理 &quot;update:visible&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">watch(</span><br><span class=\"line\">  () =&gt; props.visible,</span><br><span class=\"line\">  (newVal) =&gt; emit(&quot;update:visible&quot;, newVal)</span><br><span class=\"line\">);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;CustomModal v-model:visible=&quot;modalVisible&quot;&gt;&lt;/CustomModal&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"3-完整代码示例\"><a href=\"#3-完整代码示例\" class=\"headerlink\" title=\"3. 完整代码示例\"></a>3. 完整代码示例</h2><p>最终封装组件如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div ref=&quot;myModal&quot; class=&quot;custom-modal&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;a-modal</span><br><span class=\"line\">    :visible=&quot;visible&quot;</span><br><span class=\"line\">    destroyOnClose</span><br><span class=\"line\">    v-bind=&quot;$attrs&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    &lt;template v-for=&quot;(_val, name) in $slots&quot; #[name]=&quot;ops&quot;&gt;</span><br><span class=\"line\">      &lt;slot :name=&quot;name&quot; v-bind=&quot;ops || &#123;&#125;&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">  &lt;/a-modal&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">defineProps([&quot;visible&quot;]);</span><br><span class=\"line\">const emit = defineEmits();</span><br><span class=\"line\"></span><br><span class=\"line\">watch(</span><br><span class=\"line\">  () =&gt; props.visible,</span><br><span class=\"line\">  (newVal) =&gt; emit(&quot;update:visible&quot;, newVal)</span><br><span class=\"line\">);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class=\"line\">.custom-modal &#123;</span><br><span class=\"line\">  // 样式代码</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"4-总结：封装组件的“深坑”\"><a href=\"#4-总结：封装组件的“深坑”\" class=\"headerlink\" title=\"4. 总结：封装组件的“深坑”\"></a>4. 总结：封装组件的“深坑”</h2><p>封装组件不是一件轻松的事，尤其是当需求越来越复杂时。以下是一些常见的“深坑”：</p>\n<ol>\n<li><p><strong>属性扩展问题</strong>：频繁新增 <code>props</code> 会导致组件代码臃肿。</p>\n<ul>\n<li><strong>解决方案</strong>：使用 <code>$attrs</code> 动态绑定属性。</li>\n</ul>\n</li>\n<li><p><strong>插槽管理问题</strong>：手动定义插槽过于繁琐。</p>\n<ul>\n<li><strong>解决方案</strong>：使用 <code>$slots</code> 动态绑定插槽。</li>\n</ul>\n</li>\n<li><p><strong>状态同步问题</strong>：显隐控制不够直观。</p>\n<ul>\n<li><strong>解决方案</strong>：通过 <code>v-model</code> 实现状态同步。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"5-展望：封装组件的“无限可能”\"><a href=\"#5-展望：封装组件的“无限可能”\" class=\"headerlink\" title=\"5. 展望：封装组件的“无限可能”\"></a>5. 展望：封装组件的“无限可能”</h2><p>在实际开发中，封装组件还会遇到以下问题：</p>\n<ul>\n<li><strong>复杂交互逻辑</strong>：如何封装支持多种交互的组件？</li>\n<li><strong>性能优化</strong>：如何避免组件封装导致的性能问题？</li>\n<li><strong>通用性扩展</strong>：如何设计更通用的组件，适配更多场景？</li>\n</ul>\n<p>这些问题等待下次文章继续讨论进阶。如果你有更好的思路，欢迎交流！</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}